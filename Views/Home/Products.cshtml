@model ProductsViewModel
@using LampWebStore.Controllers

@{
    ViewData["Title"] = "Products";


    //Calculating sorting directions for the all fields

    bool lampTypeByAsc = true;
    bool manufacturerByAsc = true;
    bool costByAsc = true;

    string lampTypeClass = "";
    string manufacturerClass = "";
    string costClass = "";

    const string classTemplate = "glyphicon glyphicon-chevron-{0}";

    if(Model.SortingProp == @HomeController.SortByLampType)
    {
        lampTypeByAsc = !Model.SortByAsc;
        lampTypeClass = String.Format(classTemplate, Model.SortByAsc ? "up" : "down");
    }
    else if(Model.SortingProp == @HomeController.SortByManufacturer)
    {
        manufacturerByAsc = !Model.SortByAsc;
        manufacturerClass = String.Format(classTemplate, Model.SortByAsc ? "up" : "down");
    }
    else if(Model.SortingProp == @HomeController.SortByCost)
    {
        costByAsc = !Model.SortByAsc;
        costClass = String.Format(classTemplate, Model.SortByAsc ? "up" : "down");
    }

    //TODO: Convert all that stuff above into a tag-helper...
}

<h2>Lamps</h2>

<p class="info">The basic table of all entities from DB, with sorting, pagination and CRUD operations.</p>
<br />

<div>
    <a class="btn btn-primary" asp-controller="Home" asp-action="Create">Add new lamp</a>
</div>

<br />

<table class="table table-striped">
    <tr class="info">
        <td>
            <a asp-controller="Home" asp-action="Products" asp-route-page="@Model.CurrentPage"
               asp-route-sortingProp="@HomeController.SortByLampType"
               asp-route-sortByAsc="@lampTypeByAsc"><span class="@lampTypeClass"></span> Lamp type</a>
        </td>
        <td>
            <a asp-controller="Home" asp-action="Products" asp-route-page="@Model.CurrentPage"
               asp-route-sortingProp="@HomeController.SortByManufacturer"
               asp-route-sortByAsc="@manufacturerByAsc"><span class="@manufacturerClass"></span> Manufacturer</a>
        </td>
        <td>
            <a asp-controller="Home" asp-action="Products" asp-route-page="@Model.CurrentPage"
               asp-route-sortingProp="@HomeController.SortByCost"
               asp-route-sortByAsc="@costByAsc"><span class="@costClass"></span> Cost</a>
        </td>
        <td>
            Photo
        </td>
        <td></td>
    </tr>

    @foreach(var item in Model.Lamps)
    {
        <tr>
            <td style="width:20%">@item.LampType</td>
            <td style="width:30%">@item.Manufacturer</td>
            <td style="width:20%">$@item.Cost</td>
            <td style="width:10%">
            @if(!String.IsNullOrEmpty(item.ImageRef))
            {
                <img src="@item.ImageRef" class="img-thumbnail" style="max-height:50pt" />
            }
            </td>
            <td>
                <a asp-controller="Home" asp-action="Edit" asp-route-id="@item.Id"
                   class="btn btn-default">
                    Edit
                </a>
                <a asp-controller="Home" asp-action="Delete" asp-route-id="@item.Id"
                   class="btn btn-danger">
                    Delete
                </a>
            </td>
        </tr>
    }
</table>

@* The example of a component invocation *@
@await Component.InvokeAsync("Pagination", new { model = Model, controller = "Home", action = "Products" })